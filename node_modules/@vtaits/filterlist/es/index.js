function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import { EventEmitter } from 'fbemitter';
import arrayInsert from 'array-insert';
import collectListInitialState from './collectListInitialState';
import collectOptions from './collectOptions';
import * as eventTypes from './eventTypes';
import { LoadListError } from './errors';
export { eventTypes };

var Filterlist =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(Filterlist, _EventEmitter);

  function Filterlist(params) {
    var _this;

    _classCallCheck(this, Filterlist);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Filterlist).call(this));
    var loadItems = params.loadItems;

    if (!loadItems) {
      throw new Error('loadItems is required');
    }

    if (typeof loadItems !== 'function') {
      throw new Error('loadItems should be a function');
    }

    _this.itemsLoader = loadItems;
    _this.requestId = 0;
    _this.listState = collectListInitialState(params);
    _this.options = collectOptions(params);

    _this.onInit();

    return _this;
  }

  _createClass(Filterlist, [{
    key: "getListStateBeforeChange",
    value: function getListStateBeforeChange() {
      var prevListState = this.listState;
      var _this$options = this.options,
          saveItemsWhileLoad = _this$options.saveItemsWhileLoad,
          alwaysResetFilters = _this$options.alwaysResetFilters;
      return _objectSpread({}, prevListState, {
        filters: _objectSpread({}, prevListState.filters, alwaysResetFilters),
        appliedFilters: _objectSpread({}, prevListState.appliedFilters, alwaysResetFilters),
        loading: true,
        error: null,
        items: saveItemsWhileLoad ? prevListState.items : [],
        shouldClean: true
      });
    }
  }, {
    key: "emitEvent",
    value: function emitEvent(eventType) {
      this.emit(eventType, this.listState);
    }
  }, {
    key: "onInit",
    value: function onInit() {
      var autoload = this.options.autoload;

      if (autoload) {
        this.loadItemsOnInit();
      }
    }
  }, {
    key: "loadItemsOnInit",
    value: function () {
      var _loadItemsOnInit = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var prevListState;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                prevListState = this.listState;
                this.setListState(_objectSpread({}, prevListState, {
                  loading: true,
                  error: null,
                  shouldClean: false
                }));
                this.emitEvent(eventTypes.loadItems);
                _context.next = 5;
                return this.requestItems();

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function loadItemsOnInit() {
        return _loadItemsOnInit.apply(this, arguments);
      };
    }()
  }, {
    key: "loadItems",
    value: function () {
      var _loadItems = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        var prevListState;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                prevListState = this.listState;
                this.setListState(_objectSpread({}, prevListState, {
                  loading: true,
                  error: null,
                  shouldClean: false
                }));
                this.emitEvent(eventTypes.loadItems);
                this.emitEvent(eventTypes.changeLoadParams);
                _context2.next = 6;
                return this.requestItems();

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function loadItems() {
        return _loadItems.apply(this, arguments);
      };
    }()
  }, {
    key: "setFilterValue",
    value: function setFilterValue(filterName, value) {
      var prevListState = this.listState;
      this.setListState(_objectSpread({}, prevListState, {
        filters: _objectSpread({}, prevListState.filters, _defineProperty({}, filterName, value))
      }));
      this.emitEvent(eventTypes.setFilterValue);
    }
  }, {
    key: "applyFilter",
    value: function () {
      var _applyFilter = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3(filterName) {
        var prevListState, stateBeforeChange;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                prevListState = this.listState;
                stateBeforeChange = this.getListStateBeforeChange();
                this.setListState(_objectSpread({}, stateBeforeChange, {
                  appliedFilters: _objectSpread({}, stateBeforeChange.appliedFilters, _defineProperty({}, filterName, prevListState.filters[filterName]))
                }));
                this.emitEvent(eventTypes.applyFilter);
                this.emitEvent(eventTypes.changeLoadParams);
                _context3.next = 7;
                return this.requestItems();

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function applyFilter(_x) {
        return _applyFilter.apply(this, arguments);
      };
    }()
  }, {
    key: "setAndApplyFilter",
    value: function () {
      var _setAndApplyFilter = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4(filterName, value) {
        var prevListState, stateBeforeChange;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                prevListState = this.listState;
                stateBeforeChange = this.getListStateBeforeChange();
                this.setListState(_objectSpread({}, stateBeforeChange, {
                  filters: _objectSpread({}, prevListState.filters, _defineProperty({}, filterName, value)),
                  appliedFilters: _objectSpread({}, stateBeforeChange.appliedFilters, _defineProperty({}, filterName, value))
                }));
                this.emitEvent(eventTypes.setAndApplyFilter);
                this.emitEvent(eventTypes.changeLoadParams);
                _context4.next = 7;
                return this.requestItems();

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function setAndApplyFilter(_x2, _x3) {
        return _setAndApplyFilter.apply(this, arguments);
      };
    }()
  }, {
    key: "resetFilter",
    value: function () {
      var _resetFilter = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee5(filterName) {
        var prevListState, stateBeforeChange, initialValue;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                prevListState = this.listState;
                stateBeforeChange = this.getListStateBeforeChange();
                initialValue = this.options.initialFilters[filterName];
                this.setListState(_objectSpread({}, stateBeforeChange, {
                  filters: _objectSpread({}, prevListState.filters, _defineProperty({}, filterName, initialValue)),
                  appliedFilters: _objectSpread({}, stateBeforeChange.appliedFilters, _defineProperty({}, filterName, initialValue))
                }));
                this.emitEvent(eventTypes.resetFilter);
                this.emitEvent(eventTypes.changeLoadParams);
                _context5.next = 8;
                return this.requestItems();

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      return function resetFilter(_x4) {
        return _resetFilter.apply(this, arguments);
      };
    }()
  }, {
    key: "setFiltersValues",
    value: function setFiltersValues(values) {
      var prevListState = this.listState;
      this.setListState(_objectSpread({}, prevListState, {
        filters: _objectSpread({}, prevListState.filters, values)
      }));
      this.emitEvent(eventTypes.setFiltersValues);
    }
  }, {
    key: "applyFilters",
    value: function () {
      var _applyFilters = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee6(filtersNames) {
        var prevListState, stateBeforeChange, newAppliedFilters;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                prevListState = this.listState;
                stateBeforeChange = this.getListStateBeforeChange();
                newAppliedFilters = filtersNames.reduce(function (res, filterName) {
                  res[filterName] = prevListState.filters[filterName];
                  return res;
                }, {});
                this.setListState(_objectSpread({}, stateBeforeChange, {
                  appliedFilters: _objectSpread({}, stateBeforeChange.appliedFilters, newAppliedFilters)
                }));
                this.emitEvent(eventTypes.applyFilters);
                this.emitEvent(eventTypes.changeLoadParams);
                _context6.next = 8;
                return this.requestItems();

              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function applyFilters(_x5) {
        return _applyFilters.apply(this, arguments);
      };
    }()
  }, {
    key: "setAndApplyFilters",
    value: function () {
      var _setAndApplyFilters = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee7(values) {
        var prevListState, stateBeforeChange;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                prevListState = this.listState;
                stateBeforeChange = this.getListStateBeforeChange();
                this.setListState(_objectSpread({}, stateBeforeChange, {
                  filters: _objectSpread({}, prevListState.filters, values),
                  appliedFilters: _objectSpread({}, stateBeforeChange.appliedFilters, values)
                }));
                this.emitEvent(eventTypes.setAndApplyFilters);
                this.emitEvent(eventTypes.changeLoadParams);
                _context7.next = 7;
                return this.requestItems();

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      return function setAndApplyFilters(_x6) {
        return _setAndApplyFilters.apply(this, arguments);
      };
    }()
  }, {
    key: "resetFilters",
    value: function () {
      var _resetFilters = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee8(filtersNames) {
        var prevListState, stateBeforeChange, initialFilters, filtersForReset;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                prevListState = this.listState;
                stateBeforeChange = this.getListStateBeforeChange();
                initialFilters = this.options.initialFilters;
                filtersForReset = filtersNames.reduce(function (res, filterName) {
                  res[filterName] = initialFilters[filterName];
                  return res;
                }, {});
                this.setListState(_objectSpread({}, stateBeforeChange, {
                  filters: _objectSpread({}, prevListState.filters, filtersForReset),
                  appliedFilters: _objectSpread({}, stateBeforeChange.appliedFilters, filtersForReset)
                }));
                this.emitEvent(eventTypes.resetFilters);
                this.emitEvent(eventTypes.changeLoadParams);
                _context8.next = 9;
                return this.requestItems();

              case 9:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      return function resetFilters(_x7) {
        return _resetFilters.apply(this, arguments);
      };
    }()
  }, {
    key: "resetAllFilters",
    value: function () {
      var _resetAllFilters = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee9() {
        var prevListState, stateBeforeChange, _this$options2, initialFilters, saveFiltersOnResetAll, savedFilters, savedAppliedFilters;

        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                prevListState = this.listState;
                stateBeforeChange = this.getListStateBeforeChange();
                _this$options2 = this.options, initialFilters = _this$options2.initialFilters, saveFiltersOnResetAll = _this$options2.saveFiltersOnResetAll;
                savedFilters = saveFiltersOnResetAll.reduce(function (res, filterName) {
                  res[filterName] = prevListState.filters[filterName];
                  return res;
                }, {});
                savedAppliedFilters = saveFiltersOnResetAll.reduce(function (res, filterName) {
                  res[filterName] = prevListState.appliedFilters[filterName];
                  return res;
                }, {});
                this.setListState(_objectSpread({}, stateBeforeChange, {
                  filters: _objectSpread({}, prevListState.filters, initialFilters, savedFilters),
                  appliedFilters: _objectSpread({}, stateBeforeChange.appliedFilters, initialFilters, savedAppliedFilters)
                }));
                this.emitEvent(eventTypes.resetAllFilters);
                this.emitEvent(eventTypes.changeLoadParams);
                _context9.next = 10;
                return this.requestItems();

              case 10:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      return function resetAllFilters() {
        return _resetAllFilters.apply(this, arguments);
      };
    }()
  }, {
    key: "getNextAsc",
    value: function getNextAsc(param, asc) {
      if (typeof asc === 'boolean') {
        return asc;
      }

      var prevListState = this.listState;

      if (prevListState.sort.param === param) {
        return !prevListState.sort.asc;
      }

      return this.options.isDefaultSortAsc;
    }
  }, {
    key: "setSorting",
    value: function () {
      var _setSorting = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee10(param, asc) {
        var stateBeforeChange, nextAsc;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                stateBeforeChange = this.getListStateBeforeChange();
                nextAsc = this.getNextAsc(param, asc);
                this.setListState(_objectSpread({}, stateBeforeChange, {
                  sort: {
                    param: param,
                    asc: nextAsc
                  }
                }));
                this.emitEvent(eventTypes.setSorting);
                this.emitEvent(eventTypes.changeLoadParams);
                _context10.next = 7;
                return this.requestItems();

              case 7:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      return function setSorting(_x8, _x9) {
        return _setSorting.apply(this, arguments);
      };
    }()
  }, {
    key: "resetSorting",
    value: function () {
      var _resetSorting = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee11() {
        var stateBeforeChange, isDefaultSortAsc;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                stateBeforeChange = this.getListStateBeforeChange();
                isDefaultSortAsc = this.options.isDefaultSortAsc;
                this.setListState(_objectSpread({}, stateBeforeChange, {
                  sort: {
                    param: null,
                    asc: isDefaultSortAsc
                  }
                }));
                this.emitEvent(eventTypes.resetSorting);
                this.emitEvent(eventTypes.changeLoadParams);
                _context11.next = 7;
                return this.requestItems();

              case 7:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function resetSorting() {
        return _resetSorting.apply(this, arguments);
      };
    }()
  }, {
    key: "setFiltersAndSorting",
    value: function () {
      var _setFiltersAndSorting = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee12(_ref) {
        var filters, appliedFilters, sort, stateBeforeChange;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                filters = _ref.filters, appliedFilters = _ref.appliedFilters, sort = _ref.sort;
                stateBeforeChange = this.getListStateBeforeChange();
                this.setListState(_objectSpread({}, stateBeforeChange, {
                  filters: filters || stateBeforeChange.filters,
                  appliedFilters: appliedFilters || stateBeforeChange.appliedFilters,
                  sort: sort || stateBeforeChange.sort
                }));
                this.emitEvent(eventTypes.setFiltersAndSorting);
                _context12.next = 6;
                return this.requestItems();

              case 6:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function setFiltersAndSorting(_x10) {
        return _setFiltersAndSorting.apply(this, arguments);
      };
    }()
  }, {
    key: "requestItems",
    value: function () {
      var _requestItems = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee13() {
        var nextRequestId, response, error;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                nextRequestId = this.requestId + 1;
                ++this.requestId;
                this.emitEvent(eventTypes.requestItems);
                _context13.prev = 3;
                _context13.next = 6;
                return this.itemsLoader(this.listState);

              case 6:
                response = _context13.sent;
                _context13.next = 12;
                break;

              case 9:
                _context13.prev = 9;
                _context13.t0 = _context13["catch"](3);
                error = _context13.t0;

              case 12:
                if (!(this.requestId !== nextRequestId)) {
                  _context13.next = 14;
                  break;
                }

                return _context13.abrupt("return");

              case 14:
                if (!error) {
                  _context13.next = 19;
                  break;
                }

                if (!(error instanceof LoadListError)) {
                  _context13.next = 18;
                  break;
                }

                this.onError(error);
                return _context13.abrupt("return");

              case 18:
                throw error;

              case 19:
                this.onSuccess(response);

              case 20:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this, [[3, 9]]);
      }));

      return function requestItems() {
        return _requestItems.apply(this, arguments);
      };
    }()
  }, {
    key: "onSuccess",
    value: function onSuccess(response) {
      var prevListState = this.listState;
      var saveItemsWhileLoad = this.options.saveItemsWhileLoad;
      this.setListState(_objectSpread({}, prevListState, {
        loading: false,
        shouldClean: false,
        items: saveItemsWhileLoad && prevListState.shouldClean ? response.items : prevListState.items.concat(response.items),
        additional: typeof response.additional !== 'undefined' ? response.additional : prevListState.additional
      }));
      this.emitEvent(eventTypes.loadItemsSuccess);
    }
  }, {
    key: "onError",
    value: function onError(error) {
      var prevListState = this.listState;
      this.setListState(_objectSpread({}, prevListState, {
        loading: false,
        shouldClean: false,
        error: typeof error.error !== 'undefined' ? error.error : null,
        additional: typeof error.additional !== 'undefined' ? error.additional : prevListState.additional
      }));
      this.emitEvent(eventTypes.loadItemsError);
    }
  }, {
    key: "insertItem",
    value: function insertItem(itemIndex, item, additional) {
      var prevListState = this.listState;
      this.setListState(_objectSpread({}, prevListState, {
        items: arrayInsert(prevListState.items, itemIndex, item),
        additional: typeof additional !== 'undefined' ? additional : prevListState.additional
      }));
      this.emitEvent(eventTypes.insertItem);
    }
  }, {
    key: "deleteItem",
    value: function deleteItem(itemIndex, additional) {
      var prevListState = this.listState;
      this.setListState(_objectSpread({}, prevListState, {
        items: prevListState.items.filter(function (item, index) {
          return index !== itemIndex;
        }),
        additional: typeof additional !== 'undefined' ? additional : prevListState.additional
      }));
      this.emitEvent(eventTypes.deleteItem);
    }
  }, {
    key: "updateItem",
    value: function updateItem(itemIndex, item, additional) {
      var prevListState = this.listState;
      this.setListState(_objectSpread({}, prevListState, {
        items: prevListState.items.map(function (stateItem, index) {
          if (index === itemIndex) {
            return item;
          }

          return stateItem;
        }),
        additional: typeof additional !== 'undefined' ? additional : prevListState.additional
      }));
      this.emitEvent(eventTypes.updateItem);
    }
  }, {
    key: "setListState",
    value: function setListState(nextListState) {
      this.listState = nextListState;
      this.emitEvent(eventTypes.changeListState);
    }
  }, {
    key: "getListState",
    value: function getListState() {
      return this.listState;
    }
  }]);

  return Filterlist;
}(EventEmitter);

export default Filterlist;