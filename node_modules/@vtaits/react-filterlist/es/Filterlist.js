function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { Component } from 'react';
import PropTypes from 'prop-types';
import Filterlist, { eventTypes } from '@vtaits/filterlist';
export var methodsForChild = ['loadItems', 'setFilterValue', 'applyFilter', 'setAndApplyFilter', 'resetFilter', 'setFiltersValues', 'applyFilters', 'setAndApplyFilters', 'resetFilters', 'resetAllFilters', 'setSorting', 'resetSorting', 'insertItem', 'deleteItem', 'updateItem'];
export function defaultShouldRecount(data1, data2) {
  return data1 === data2;
}

var FilterlistWrapper =
/*#__PURE__*/
function (_Component) {
  _inherits(FilterlistWrapper, _Component);

  function FilterlistWrapper(props) {
    var _this;

    _classCallCheck(this, FilterlistWrapper);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FilterlistWrapper).call(this, props));
    var parseFiltersAndSort = props.parseFiltersAndSort,
        isRecountAsync = props.isRecountAsync;
    _this.syncListState = _this.syncListState.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onChangeLoadParams = _this.onChangeLoadParams.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    var shouldInitAsync = Boolean(parseFiltersAndSort) && isRecountAsync;

    if (shouldInitAsync) {
      _this.initFilterlistAsync();
    } else {
      _this.initFilterlist();
    }

    _this.state = {
      isListInited: !shouldInitAsync,
      listState: shouldInitAsync ? null : _this.filterlist.getListState()
    };
    return _this;
  }

  _createClass(FilterlistWrapper, [{
    key: "componentDidUpdate",
    value: function () {
      var _componentDidUpdate = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(prevProps) {
        var _this$props, parseFiltersAndSort, filtersAndSortData, shouldRecount, parsedFiltersAndSort;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$props = this.props, parseFiltersAndSort = _this$props.parseFiltersAndSort, filtersAndSortData = _this$props.filtersAndSortData, shouldRecount = _this$props.shouldRecount;

                if (!(parseFiltersAndSort && shouldRecount(filtersAndSortData, prevProps.filtersAndSortData))) {
                  _context.next = 6;
                  break;
                }

                _context.next = 4;
                return parseFiltersAndSort(filtersAndSortData);

              case 4:
                parsedFiltersAndSort = _context.sent;
                this.filterlist.setFiltersAndSorting(parsedFiltersAndSort);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function componentDidUpdate(_x) {
        return _componentDidUpdate.apply(this, arguments);
      };
    }()
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unmounted = true;
      this.filterlist.removeAllListeners(eventTypes.changeListState);
    }
  }, {
    key: "onChangeLoadParams",
    value: function onChangeLoadParams(nextListState) {
      var onChangeLoadParams = this.props.onChangeLoadParams;

      if (onChangeLoadParams) {
        onChangeLoadParams(nextListState);
      }
    }
  }, {
    key: "getFilterlistOptions",
    value: function getFilterlistOptions() {
      var _this$props2 = this.props,
          parseFiltersAndSort = _this$props2.parseFiltersAndSort,
          filtersAndSortData = _this$props2.filtersAndSortData;

      if (parseFiltersAndSort) {
        var parsedFiltersAndSort = parseFiltersAndSort(filtersAndSortData);
        return _objectSpread({}, this.props, parsedFiltersAndSort);
      }

      return this.props;
    }
  }, {
    key: "getFilterlistOptionsAsync",
    value: function () {
      var _getFilterlistOptionsAsync = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        var _this$props3, parseFiltersAndSort, filtersAndSortData, parsedFiltersAndSort;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _this$props3 = this.props, parseFiltersAndSort = _this$props3.parseFiltersAndSort, filtersAndSortData = _this$props3.filtersAndSortData;
                _context2.next = 3;
                return parseFiltersAndSort(filtersAndSortData);

              case 3:
                parsedFiltersAndSort = _context2.sent;
                return _context2.abrupt("return", _objectSpread({}, this.props, parsedFiltersAndSort));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function getFilterlistOptionsAsync() {
        return _getFilterlistOptionsAsync.apply(this, arguments);
      };
    }()
  }, {
    key: "initFilterlist",
    value: function initFilterlist() {
      var options = this.getFilterlistOptions();
      this.createFilterlist(options);
    }
  }, {
    key: "initFilterlistAsync",
    value: function () {
      var _initFilterlistAsync = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3() {
        var options;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.getFilterlistOptionsAsync();

              case 2:
                options = _context3.sent;

                if (!this.unmounted) {
                  _context3.next = 5;
                  break;
                }

                return _context3.abrupt("return");

              case 5:
                this.createFilterlist(options);
                _context3.next = 8;
                return this.setState({
                  isListInited: true,
                  listState: this.filterlist.getListState()
                });

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function initFilterlistAsync() {
        return _initFilterlistAsync.apply(this, arguments);
      };
    }()
  }, {
    key: "createFilterlist",
    value: function createFilterlist(options) {
      var filterlist = new Filterlist(options);
      filterlist.addListener(eventTypes.changeListState, this.syncListState);
      var listActions = methodsForChild.reduce(function (res, methodName) {
        res[methodName] = filterlist[methodName].bind(filterlist);
        return res;
      }, {});
      filterlist.addListener(eventTypes.changeLoadParams, this.onChangeLoadParams);
      this.listActions = listActions;
      this.filterlist = filterlist;
    }
  }, {
    key: "syncListState",
    value: function syncListState() {
      this.setState({
        listState: this.filterlist.getListState()
      });
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      var _this$state = this.state,
          isListInited = _this$state.isListInited,
          listState = _this$state.listState;
      return children({
        isListInited: isListInited,
        listState: listState,
        listActions: this.listActions
      });
    }
  }]);

  return FilterlistWrapper;
}(Component);

_defineProperty(FilterlistWrapper, "propTypes", {
  parseFiltersAndSort: PropTypes.func,
  // eslint-disable-next-line react/forbid-prop-types
  filtersAndSortData: PropTypes.any,
  shouldRecount: PropTypes.func,
  isRecountAsync: PropTypes.bool,
  children: PropTypes.func.isRequired,
  onChangeLoadParams: PropTypes.func
});

_defineProperty(FilterlistWrapper, "defaultProps", {
  parseFiltersAndSort: null,
  filtersAndSortData: null,
  shouldRecount: defaultShouldRecount,
  isRecountAsync: false,
  onChangeLoadParams: null
});

export default FilterlistWrapper;