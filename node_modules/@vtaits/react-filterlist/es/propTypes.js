function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import PropTypes from 'prop-types';
var sortShape = PropTypes.shape({
  param: PropTypes.string,
  asc: PropTypes.bool.isRequired
});
export function createListStatePropTypes(listStateConfig) {
  if (_typeof(listStateConfig) !== 'object') {
    throw new Error('List state config should be an object');
  }

  if (listStateConfig === null) {
    throw new Error('List state config can\'t be null');
  }

  var _listStateConfig$item = listStateConfig.item,
      item = _listStateConfig$item === void 0 ? PropTypes.any : _listStateConfig$item,
      _listStateConfig$filt = listStateConfig.filters,
      filters = _listStateConfig$filt === void 0 ? PropTypes.object : _listStateConfig$filt,
      _listStateConfig$addi = listStateConfig.additional,
      additional = _listStateConfig$addi === void 0 ? PropTypes.any : _listStateConfig$addi,
      _listStateConfig$erro = listStateConfig.error,
      error = _listStateConfig$erro === void 0 ? PropTypes.any : _listStateConfig$erro;
  return {
    sort: sortShape.isRequired,
    filters: filters.isRequired,
    appliedFilters: filters.isRequired,
    loading: PropTypes.bool.isRequired,
    items: PropTypes.arrayOf(item).isRequired,
    additional: additional,
    error: error
  };
}
export function createListStateShape(listStateConfig) {
  var listStatePropTypes = createListStatePropTypes(listStateConfig);
  return PropTypes.shape(listStatePropTypes);
}
export var listActionsPropTypes = {
  loadItems: PropTypes.func.isRequired,
  setFilterValue: PropTypes.func.isRequired,
  applyFilter: PropTypes.func.isRequired,
  setAndApplyFilter: PropTypes.func.isRequired,
  resetFilter: PropTypes.func.isRequired,
  setFiltersValues: PropTypes.func.isRequired,
  applyFilters: PropTypes.func.isRequired,
  setAndApplyFilters: PropTypes.func.isRequired,
  resetFilters: PropTypes.func.isRequired,
  resetAllFilters: PropTypes.func.isRequired,
  setSorting: PropTypes.func.isRequired,
  resetSorting: PropTypes.func.isRequired,
  insertItem: PropTypes.func.isRequired,
  deleteItem: PropTypes.func.isRequired,
  updateItem: PropTypes.func.isRequired
};
export var listActionsShape = PropTypes.shape(listActionsPropTypes);